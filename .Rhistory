set.seed(12)
splitPercent = 0.80
trainIndex = sample(1:dim(data.nb)[1],round(splitPercent * dim(data.nb)[1]))
train.nb = data.nb[trainIndex,]
test.nb = data.nb[-trainIndex,]
model.nb = naiveBayes(Attrition~.,data=train.nb, laplace = 1)
predict.nb = predict(model.nb,test.nb)
table(predict.nb,test.nb$Attrition)
confusionMatrix(predict.nb,test.nb$Attrition)
# Now I want to run 100 iterations to get an average accuracy, sensitivity, and specificity rate
set.seed(13)
iterations = 100
masterAcc = matrix(nrow = iterations,ncol=3)
splitPerc = .8 #Training / Test split Percentage
for(j in 1:iterations)
{
trainIndices = sample(1:dim(data.nb)[1],round(splitPerc * dim(data.nb)[1]))
train = data.nb[trainIndices,]
test = data.nb[-trainIndices,]
model = naiveBayes(Attrition~.,data=train,laplace = 1)
CM = confusionMatrix(table(predict(model,test$Attrition),test$Attrition))
masterAcc[j,1] = CM$overall[1]
masterAcc[j,2]=CM$byClass[1]
masterAcc[j,3] = CM$byClass[2]
}
warnings()
MeanAcc = colMeans(masterAcc)
MeanAcc
#select variables decided to predict Attrition
data.nb = employeeData %>% select(Attrition, OverTime, MonthlyIncome, TotalWorkingYears, YearsAtCompany, StockOptionLevel, MaritalStatus, JobLevel, YearsInCurrentRole, YearsWithCurrManager, Age, JobInvolvement, JobSatisfaction, JobRole, Department,Education, WorkLifeBalance, EnvironmentSatisfaction)
set.seed(12)
splitPercent = 0.80
trainIndex = sample(1:dim(data.nb)[1],round(splitPercent * dim(data.nb)[1]))
train.nb = data.nb[trainIndex,]
test.nb = data.nb[-trainIndex,]
model.nb = naiveBayes(Attrition~.,data=train.nb, laplace = 1)
predict.nb = predict(model.nb,test.nb)
table(predict.nb,test.nb)
table(predict.nb,test.nb$Attrition)
confusionMatrix(predict.nb,test.nb$Attrition)
set.seed(13)
iterations = 100
masterAcc = matrix(nrow = iterations,ncol=3)
splitPerc = .8 #Training / Test split Percentage
for(j in 1:iterations)
{
trainIndices = sample(1:dim(data.nb)[1],round(splitPerc * dim(data.nb)[1]))
train = data.nb[trainIndices,]
test = data.nb[-trainIndices,]
model = naiveBayes(Attrition~.,data=train,laplace = 1)
CM = confusionMatrix(table(predict(model,test),test$Attrition))
masterAcc[j,1] = CM$overall[1]
masterAcc[j,2]=CM$byClass[1]
masterAcc[j,3] = CM$byClass[2]
}
MeanAcc = colMeans(masterAcc)
MeanAcc
noAttrition = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2CompSet No Attrition.csv",header = TRUE)
head(noAttrition)
noAttrition[cols.to.factor] = lapply(noAttrition[cols.to.factor],factor)
cols.to.factor
str(noAttrition)
cols.to.factor2 = c("BusinessTravel","Department","EducationField","EnvironmentSatisfaction",
"Gender","JobInvolvement","JobLevel","JobRole","JobSatisfaction","MaritalStatus","NumCompaniesWorked",
"OverTime","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","TrainingTimesLastYear",
"WorkLifeBalance")
noAttrition[cols.to.factor2] = lapply(noAttrition[cols.to.factor2],factor)
#Create prediction set
predictionSet = noAttrition %>% select(Attrition, OverTime, MonthlyIncome, TotalWorkingYears, YearsAtCompany, StockOptionLevel, MaritalStatus, JobLevel, YearsInCurrentRole, YearsWithCurrManager, Age, JobInvolvement, JobSatisfaction, JobRole, Department,Education, WorkLifeBalance, EnvironmentSatisfaction)
#Create prediction set
predictionSet = noAttrition %>% select(OverTime, MonthlyIncome, TotalWorkingYears, YearsAtCompany, StockOptionLevel, MaritalStatus, JobLevel, YearsInCurrentRole, YearsWithCurrManager, Age, JobInvolvement, JobSatisfaction, JobRole, Department,Education, WorkLifeBalance, EnvironmentSatisfaction)
#Retrain the NB model with entire dataset to improve prediction accuracy
model.nb = naiveBayes(Attrition~.,data=data.nb, laplace = 1)
prediction.NoAttrition = predict(model.nb,noAttrition)
prediction.NoAttrition
noAttrition$Attrition = prediction.NoAttrition
results = noAttrition%>%select(ID,Attrition)
results
str(results)
write.csv(results,"Case2PredictionsYU Attrition.csv",row.names = FALSE)
#Load library to run stepwise regression method to choose an optimal simple model
library(MASS)
str(employeeData)
res.lm = lm(MonthlyIncome~.,data=employeeData)
step = stepAIC(res.lm, direction="both", trace=FALSE)
step
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
step.model$finalModel
summary(step.model$finalModel)
#Build the model
my.linear.model = lm(MontlyIncome ~ ID + BusinessTravelTravel_Frequently +
BusinessTravelTravel_Rarely + DailyRate + DepartmentSales +
JobLevel2 + JobLevel3 + JobLevel4 + JobLevel5 + `JobRoleHuman Resources` +
`JobRoleLaboratory Technician` + JobRoleManager + `JobRoleResearch Director` +
`JobRoleResearch Scientist` + `JobRoleSales Executive` +
`JobRoleSales Representative` + NumCompaniesWorked3 + TotalWorkingYears +
TrainingTimesLastYear2 + TrainingTimesLastYear3 + TrainingTimesLastYear4,
data = employeeData)
#load in CaseStudy2CompSet No Salary.csv to predict monthly salary
noSalary = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2CompSet No Salary.csv",header = TRUE)
cols.to.factor3 = c("Attrition","BusinessTravel","Department","EducationField","EnvironmentSatisfaction",
"Gender","JobInvolvement","JobLevel","JobRole","JobSatisfaction","MaritalStatus","NumCompaniesWorked",
"OverTime","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","TrainingTimesLastYear",
"WorkLifeBalance")
noSalary[cols.to.factor] = lapply(noSalary[cols.to.factor],factor)
prediction.monthlyS = predict(step.model,noSalary)
prediction.monthlyS
noSalary$MonthlyIncome = prediction.monthlyS
results1 = noSalary %>% select(ID,MonthlyIncome)
str(noSalary)
results1 = noSalary %>% select(ID,MonthlyIncome)
results1 = noSalary %>%select(MonthlyIncome)
results1 = noSalary%>%select(ID,Attrition)
library(tidyverse)
results1 = noSalary%>%select(ID,MonthlyIncome)
results1 = noSalary%>%tidyverse::select(ID,MonthlyIncome)
results1 = noSalary %>% tidyverse::select(ID,MonthlyIncome)
results1 = data.frame(c(noSalary$ID,noSalary$MonthlyIncome))
results1
#Write results1 to CaseStudy2CompSet No Salary.csv
write.csv(results1,"Case2PredictionsYU Salary.csv",row.names = FALSE)
noSalary$ID
str(results1)
results1 = data.frame(noSalary$ID,noSalary$MonthlyIncome)
str(results1)
#Write results1 to CaseStudy2CompSet No Salary.csv
write.csv(results1,"Case2PredictionsYU Salary.csv",row.names = FALSE)
summary(step.model$finalModel)
step.model$finalModel
str(employeeData)
employeeData$Department
sapply(employeeData$JobRole, levels)
unique(employeeData$JobRole)
?map
employeeData%>%purrr:map(levels)
#Look at all the job roles
unique(employeeData$JobRole)
employeeData %>% group_by(JobRole) %>% mean(JobSatisfaction)
employeeData %>% group_by(JobRole)
employeeData %>% group_by(JobRole) %>% summarize(mean(JobSatisfaction))
unique(employeeData$JobRole)
#Loading in Employee data
employeeData = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2-data.csv",header = TRUE)
summary(employeeData)
#See which column has only unique value
sapply(employeeData,function(col) length(unique(col)))
#Delete column that has only one unique value
to.be.deleted = which(sapply(employeeData,function(col) length(unique(col))==1))
employeeData = employeeData[,-to.be.deleted]
employeeData %>% group_by(JobRole) %>% summarize(mean(JobSatisfaction))
satisfaction.by.jobrole = employeeData %>% group_by(JobRole) %>% summarize(mean(JobSatisfaction))
str(satisfaction.by.jobrole)
colnames(satisfaction.by.jobrole)
names(satisfaction.by.jobrole)[2]="JobSatisfaction"
satisfaction.by.jobrole
satisfaction.by.jobrole%>% ggplot(aes(x=JobRole,y=JobSatisfaction))+
geom_bar(color="light blue")
satisfaction.by.jobrole%>% ggplot(aes(x=JobRole,y=JobSatisfaction))+
geom_bar(color="light blue",stat="identity")
satisfaction.by.jobrole%>% ggplot(aes(x=JobRole,y=JobSatisfaction))+
geom_bar(fill="light blue",stat="identity")
satisfaction.by.jobrole%>% ggplot(aes(x=JobRole,y=JobSatisfaction))+
geom_bar(fill="light blue",stat="identity") +
coord_flip()
satisfaction.by.jobrole%>% ggplot(aes(reorder(JobRole,JobSatisfaction),JobSatisfaction))+
geom_bar(fill="light blue",stat="identity") +
coord_flip()
satisfaction.by.jobrole%>% ggplot(aes(reorder(JobRole,JobSatisfaction),JobSatisfaction))+
geom_bar(fill="light blue",stat="identity") +
ggtitle("Job role vs Average Job Satisfaction Score")+
xlab("Job Roles")+ ylab("Average Job Satisfaction Score")
satisfaction.by.jobrole%>% ggplot(aes(reorder(JobRole,JobSatisfaction),JobSatisfaction))+
geom_bar(fill="light blue",stat="identity") +
ggtitle("Job role vs Average Job Satisfaction Score")+
xlab("Job Roles")+ ylab("Average Job Satisfaction Score")+
coord_flip()
satisfaction.by.jobrole%>% ggplot(aes(reorder(JobRole,JobSatisfaction),JobSatisfaction))+
geom_bar(fill="blue",stat="identity") +
ggtitle("Job role vs Average Job Satisfaction Score")+
xlab("Job Roles")+ ylab("Average Job Satisfaction Score")+
coord_flip()
t.test(MonthlyIncome ~ Gender, data = employeeData)
?t.test
t.test(MonthlyIncome ~ Gender, data = employeeData, conf.level=0.95)
t.test(MonthlyIncome ~ Gender, data = employeeData, conf.level=0.05)
t.test(MonthlyIncome ~ Gender, data = employeeData, conf.level=0.95)
t.test(PercentSalaryHike~Gender,data=employeeData,conf.level=0.95)
work.life.balance = employeeData %>% group_by(JobRole) %>% summarize(mean(WorkLifeBalance))
str(work.life.balance)
names(work.life.balance)[2]="WorkLifeBalance"
work.life.balance%>% ggplot(aes(reorder(JobRole,WorkLifeBalance),WorkLifeBalance))+
geom_bar(fill="blue",stat="identity") +
ggtitle("Job role vs Average Work Life Balance Score")+
xlab("Job Roles")+ ylab("Average Work Life Balance Score")+
coord_flip()
#Model Accuracy
step.model$results
str(employeeData)
library(tidyverse)
library(ggplot2)
#Loading in Employee data
employeeData = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2-data.csv",header = TRUE)
summary(employeeData)
#See which column has only unique value
sapply(employeeData,function(col) length(unique(col)))
#Delete column that has only one unique value
to.be.deleted = which(sapply(employeeData,function(col) length(unique(col))==1))
employeeData = employeeData[,-to.be.deleted]
#observe the cleaner set again
summary(employeeData)
#Convert some values into factors
cols.to.factor = c("Attrition","BusinessTravel","Department","EducationField","EnvironmentSatisfaction",
"Gender","JobInvolvement","JobLevel","JobRole","JobSatisfaction","MaritalStatus","NumCompaniesWorked",
"OverTime","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","TrainingTimesLastYear",
"WorkLifeBalance")
employeeData[cols.to.factor] = lapply(employeeData[cols.to.factor],factor)
str(employeeData)
#Load in libraries
library(lattice)
library(caret)
library(mlbench)
#prepare training scheme
control = trainControl(method="repeatedcv", number=10, repeats=3)
#train the model
model = train(Attrition~.,data=employeeData,method="lvq",preProcess="scale", trControl=control)
#estimate variable importance
importance = varImp(model,scale=FALSE)
#summarize importance
print(importance)
#plot importance
plot(importance)
#Load NB libraries
library(e1071)
#Load library to run stepwise regression method to choose an optimal simple model
library(MASS)
#Build the model with internel verfication
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
str(employeeData)
train.control <- trainControl(method = "cv", number = 5)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
?train
#Load library to run stepwise regression method to choose an optimal simple model
library(MASS)
?train
#Loading in Employee data
employeeData = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2-data.csv",header = TRUE)
#Delete column that has only one unique value
to.be.deleted = which(sapply(employeeData,function(col) length(unique(col))==1))
employeeData = employeeData[,-to.be.deleted]
library(GGally)
employeeData %>% select(Gender)
employeeData %>% dplyr::select(Gender)
employeeData %>% dplyr::select(HourlyRate, MonthlyIncome, MonthlyRate,PercentSalaryHike)+
ggpairs()
employeeData %>% dplyr::select(HourlyRate, MonthlyIncome, MonthlyRate,PercentSalaryHike)%>%
ggpairs()
#Does more years in the company result in higher MonthlyIncome?
employeeData%>% dplyr::select(YearsAtCompany,MonthlyIncome,JobRole)%>%
ggplot(aes(x=YearsAtCompany,y=MonthlyIncome,color=JobRole))+
geom_point()
#Does more years in the company result in higher MonthlyIncome?
employeeData%>% dplyr::select(YearsAtCompany,MonthlyIncome,JobRole)%>%
ggplot(aes(x=YearsAtCompany,y=MonthlyIncome,color=JobRole))+
geom_point()+
geom_smooth(method='lm',formula=y~x)
#Does more years in the company result in higher MonthlyIncome?
employeeData%>% dplyr::select(YearsAtCompany,MonthlyIncome,JobRole)%>%
ggplot(aes(x=YearsAtCompany,y=MonthlyIncome,color=JobRole))+
geom_point()+
geom_smooth(method='lm',formula=y~x) + ggtitle("MonthlyIncome vs Years At Company across different Job Roles")+
xlab("Years At Company")+ylab("Monthly Income")
step.model$finalModel
#Loading libraries needed
library(tidyverse)
library(ggplot2)
#Load library to run stepwise regression method to choose an optimal simple model
library(MASS)
#Loading in Employee data
employeeData = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2-data.csv",header = TRUE)
#See which column has only unique value
sapply(employeeData,function(col) length(unique(col)))
#Delete column that has only one unique value
to.be.deleted = which(sapply(employeeData,function(col) length(unique(col))==1))
employeeData = employeeData[,-to.be.deleted]
#Convert some values into factors
cols.to.factor = c("Attrition","BusinessTravel","Department","EducationField","EnvironmentSatisfaction",
"Gender","JobInvolvement","JobLevel","JobRole","JobSatisfaction","MaritalStatus","NumCompaniesWorked",
"OverTime","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","TrainingTimesLastYear",
"WorkLifeBalance")
employeeData[cols.to.factor] = lapply(employeeData[cols.to.factor],factor)
str(employeeData)
#Load library to run stepwise regression method to choose an optimal simple model
library(MASS)
#Build the model with internel verfication
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Load NB libraries
library(e1071)
library(lattice)
library(caret)
library(mlbench)
#Build the model with internel verfication
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
step.model$finalModel
summary(step.model$finalModel)
#load in CaseStudy2CompSet No Salary.csv to predict monthly salary
noSalary = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2CompSet No Salary.csv",header = TRUE)
cols.to.factor3 = c("Attrition","BusinessTravel","Department","EducationField","EnvironmentSatisfaction",
"Gender","JobInvolvement","JobLevel","JobRole","JobSatisfaction","MaritalStatus","NumCompaniesWorked",
"OverTime","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","TrainingTimesLastYear",
"WorkLifeBalance")
noSalary[cols.to.factor] = lapply(noSalary[cols.to.factor],factor)
prediction.monthlyS = predict(step.model,noSalary)
prediction.monthlyS
noSalary$MonthlyIncome = prediction.monthlyS
results1 = data.frame(noSalary$ID,noSalary$MonthlyIncome)
head(results1)
results1 = noSalary%>% dplyr::select(ID,MonthlyIncome)
#Write results1 to CaseStudy2CompSet No Salary.csv
write.csv(results1,"Case2PredictionsYU Salary.csv",row.names = FALSE)
library(MASS)
#Build the model with internel verfication
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
step.model$finalModel
set.seed(11)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(12)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(13)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(14)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(15)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(16)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(17)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(18)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(19)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(20)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(21)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(22)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(23)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(24)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
#load in CaseStudy2CompSet No Salary.csv to predict monthly salary
noSalary = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2CompSet No Salary.csv",header = TRUE)
cols.to.factor3 = c("Attrition","BusinessTravel","Department","EducationField","EnvironmentSatisfaction",
"Gender","JobInvolvement","JobLevel","JobRole","JobSatisfaction","MaritalStatus","NumCompaniesWorked",
"OverTime","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","TrainingTimesLastYear",
"WorkLifeBalance")
noSalary[cols.to.factor] = lapply(noSalary[cols.to.factor],factor)
prediction.monthlyS = predict(step.model,noSalary)
prediction.monthlyS
noSalary$MonthlyIncome = prediction.monthlyS
results1 = noSalary%>% dplyr::select(ID,MonthlyIncome)
#Write results1 to CaseStudy2CompSet No Salary.csv
write.csv(results1,"Case2PredictionsYU Salary.csv",row.names = FALSE)
#Loading libraries needed
library(tidyverse)
library(ggplot2)
#Loading in Employee data
employeeData = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2-data.csv",header = TRUE)
#Delete column that has only one unique value
to.be.deleted = which(sapply(employeeData,function(col) length(unique(col))==1))
employeeData = employeeData[,-to.be.deleted]
#Convert some values into factors
cols.to.factor = c("Attrition","BusinessTravel","Department","EducationField","EnvironmentSatisfaction",
"Gender","JobInvolvement","JobLevel","JobRole","JobSatisfaction","MaritalStatus","NumCompaniesWorked",
"OverTime","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","TrainingTimesLastYear",
"WorkLifeBalance")
employeeData[cols.to.factor] = lapply(employeeData[cols.to.factor],factor)
#Load in libraries
library(lattice)
library(caret)
library(mlbench)
#Load library to run stepwise regression method to choose an optimal simple model
library(MASS)
#Build the model with internel verfication
set.seed(24)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
step.model$finalModel
summary(step.model$finalModel)
